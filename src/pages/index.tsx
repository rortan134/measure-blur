import styles from "./index.module.css";
import Head from "next/head";
import * as React from "react";
import { measureBlur } from "./blur";

export default function Home() {
    const canvasRef = React.useRef<HTMLCanvasElement>(null);
    const calculationTimeRef = React.useRef(0);

    function readImageFile(rawFile: Blob) {
        return new Promise(function (resolve, reject) {
            if (!rawFile) return reject();

            const reader = new FileReader();
            reader.onload = function (readerEvent) {
                const img = new Image();
                img.onload = function () {
                    resolve({
                        // NOTE: This is not ImageData object!
                        rawFile: rawFile,
                        data: img,
                        width: img.width,
                        height: img.height,
                    });
                };
                img.onerror = reject;
                if (!readerEvent.target?.result) return;
                img.src = readerEvent.target.result as string;
            };
            reader.readAsDataURL(rawFile);
        });
    }

    function showScore(score) {
        console.log("Score: " + score.avg_edge_width_perc.toFixed(2));
        console.log("Detail blur score:", score);
        console.log("Calculation time: " + ((Date.now() - calculationTimeRef.current) / 1000).toFixed(3) + " sec");
    }

    function handleImageInput(event: React.ChangeEvent<HTMLInputElement>) {
        const done = (img) => {
            if (!canvasRef.current) return;
            const context = canvasRef.current.getContext("2d");
            if (!context) return;

            canvasRef.current.width = img.width;
            canvasRef.current.height = img.height;
            context.drawImage(img.data, 0, 0);

            const canvasData = context.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);
            showScore(measureBlur(canvasData));
        };
        calculationTimeRef.current = Date.now();

        if (!event.target.files) return;
        readImageFile(event.target.files[0]!).then(done, console.error);
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.container}>
                    <input type="file" id="upload_image" accept="image/*" onChange={handleImageInput} />
                    <canvas ref={canvasRef} id="canvas"></canvas>
                </div>
            </main>
        </>
    );
}
